// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protobuf-codegen-pure=3.0.0-pre
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `rendezvous.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct RegisterPeer {
    // message fields
    pub id: ::std::string::String,
    pub serial: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterPeer {
    fn default() -> &'a RegisterPeer {
        <RegisterPeer as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPeer {
    pub fn new() -> RegisterPeer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RegisterPeer| { &m.id },
            |m: &mut RegisterPeer| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &RegisterPeer| { &m.serial },
            |m: &mut RegisterPeer| { &mut m.serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPeer>(
            "RegisterPeer",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for RegisterPeer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.serial = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.serial != 0 {
            my_size += ::protobuf::rt::value_size(2, self.serial, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.serial != 0 {
            os.write_int32(2, self.serial)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RegisterPeer {
        RegisterPeer::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static RegisterPeer {
        static instance: RegisterPeer = RegisterPeer {
            id: ::std::string::String::new(),
            serial: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RegisterPeer {
    fn clear(&mut self) {
        self.id.clear();
        self.serial = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterPeer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPeer {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterPeerResponse {
    // message fields
    pub request_pk: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterPeerResponse {
    fn default() -> &'a RegisterPeerResponse {
        <RegisterPeerResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPeerResponse {
    pub fn new() -> RegisterPeerResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_pk",
            |m: &RegisterPeerResponse| { &m.request_pk },
            |m: &mut RegisterPeerResponse| { &mut m.request_pk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPeerResponse>(
            "RegisterPeerResponse",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for RegisterPeerResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_pk = is.read_bool()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_pk != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.request_pk != false {
            os.write_bool(2, self.request_pk)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RegisterPeerResponse {
        RegisterPeerResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static RegisterPeerResponse {
        static instance: RegisterPeerResponse = RegisterPeerResponse {
            request_pk: false,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RegisterPeerResponse {
    fn clear(&mut self) {
        self.request_pk = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterPeerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPeerResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PunchHoleRequest {
    // message fields
    pub id: ::std::string::String,
    pub nat_type: ::protobuf::ProtobufEnumOrUnknown<NatType>,
    pub conn_type: ::protobuf::ProtobufEnumOrUnknown<ConnType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PunchHoleRequest {
    fn default() -> &'a PunchHoleRequest {
        <PunchHoleRequest as ::protobuf::Message>::default_instance()
    }
}

impl PunchHoleRequest {
    pub fn new() -> PunchHoleRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PunchHoleRequest| { &m.id },
            |m: &mut PunchHoleRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nat_type",
            |m: &PunchHoleRequest| { &m.nat_type },
            |m: &mut PunchHoleRequest| { &mut m.nat_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "conn_type",
            |m: &PunchHoleRequest| { &m.conn_type },
            |m: &mut PunchHoleRequest| { &mut m.conn_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHoleRequest>(
            "PunchHoleRequest",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for PunchHoleRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.nat_type = is.read_enum_or_unknown()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.conn_type = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.nat_type != ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.nat_type);
        }
        if self.conn_type != ::protobuf::ProtobufEnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            my_size += ::protobuf::rt::enum_or_unknown_size(4, self.conn_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.nat_type != ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&self.nat_type))?;
        }
        if self.conn_type != ::protobuf::ProtobufEnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            os.write_enum(4, ::protobuf::ProtobufEnumOrUnknown::value(&self.conn_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PunchHoleRequest {
        PunchHoleRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static PunchHoleRequest {
        static instance: PunchHoleRequest = PunchHoleRequest {
            id: ::std::string::String::new(),
            nat_type: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            conn_type: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PunchHoleRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.nat_type = ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT);
        self.conn_type = ::protobuf::ProtobufEnumOrUnknown::new(ConnType::DEFAULT_CONN);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PunchHoleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHoleRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PunchHole {
    // message fields
    pub socket_addr: ::std::vec::Vec<u8>,
    pub relay_server: ::std::string::String,
    pub nat_type: ::protobuf::ProtobufEnumOrUnknown<NatType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PunchHole {
    fn default() -> &'a PunchHole {
        <PunchHole as ::protobuf::Message>::default_instance()
    }
}

impl PunchHole {
    pub fn new() -> PunchHole {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &PunchHole| { &m.socket_addr },
            |m: &mut PunchHole| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &PunchHole| { &m.relay_server },
            |m: &mut PunchHole| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nat_type",
            |m: &PunchHole| { &m.nat_type },
            |m: &mut PunchHole| { &mut m.nat_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHole>(
            "PunchHole",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for PunchHole {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.socket_addr = is.read_bytes()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.relay_server = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.nat_type = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.relay_server);
        }
        if self.nat_type != ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            my_size += ::protobuf::rt::enum_or_unknown_size(3, self.nat_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(2, &self.relay_server)?;
        }
        if self.nat_type != ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            os.write_enum(3, ::protobuf::ProtobufEnumOrUnknown::value(&self.nat_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PunchHole {
        PunchHole::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static PunchHole {
        static instance: PunchHole = PunchHole {
            socket_addr: ::std::vec::Vec::new(),
            relay_server: ::std::string::String::new(),
            nat_type: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PunchHole {
    fn clear(&mut self) {
        self.socket_addr.clear();
        self.relay_server.clear();
        self.nat_type = ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PunchHole {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHole {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct TestNatRequest {
    // message fields
    pub serial: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestNatRequest {
    fn default() -> &'a TestNatRequest {
        <TestNatRequest as ::protobuf::Message>::default_instance()
    }
}

impl TestNatRequest {
    pub fn new() -> TestNatRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &TestNatRequest| { &m.serial },
            |m: &mut TestNatRequest| { &mut m.serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestNatRequest>(
            "TestNatRequest",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for TestNatRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.serial = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.serial != 0 {
            my_size += ::protobuf::rt::value_size(1, self.serial, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.serial != 0 {
            os.write_int32(1, self.serial)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> TestNatRequest {
        TestNatRequest::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static TestNatRequest {
        static instance: TestNatRequest = TestNatRequest {
            serial: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for TestNatRequest {
    fn clear(&mut self) {
        self.serial = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestNatRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestNatRequest {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct TestNatResponse {
    // message fields
    pub port: i32,
    pub cu: ::protobuf::MessageField<ConfigUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestNatResponse {
    fn default() -> &'a TestNatResponse {
        <TestNatResponse as ::protobuf::Message>::default_instance()
    }
}

impl TestNatResponse {
    pub fn new() -> TestNatResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &TestNatResponse| { &m.port },
            |m: &mut TestNatResponse| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConfigUpdate>(
            "cu",
            |m: &TestNatResponse| { &m.cu },
            |m: &mut TestNatResponse| { &mut m.cu },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestNatResponse>(
            "TestNatResponse",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for TestNatResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.cu {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.port = is.read_int32()?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.cu)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(1, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.cu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.port != 0 {
            os.write_int32(1, self.port)?;
        }
        if let Some(v) = self.cu.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> TestNatResponse {
        TestNatResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }

    fn default_instance() -> &'static TestNatResponse {
        static instance: TestNatResponse = TestNatResponse {
            port: 0,
            cu: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for TestNatResponse {
    fn clear(&mut self) {
        self.port = 0;
        self.cu.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestNatResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestNatResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct PunchHoleSent {
    // message fields
    pub socket_addr: ::std::vec::Vec<u8>,
    pub id: ::std::string::String,
    pub relay_server: ::std::string::String,
    pub nat_type: ::protobuf::ProtobufEnumOrUnknown<NatType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PunchHoleSent {
    fn default() -> &'a PunchHoleSent {
        <PunchHoleSent as ::protobuf::Message>::default_instance()
    }
}

impl PunchHoleSent {
    pub fn new() -> PunchHoleSent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &PunchHoleSent| { &m.socket_addr },
            |m: &mut PunchHoleSent| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PunchHoleSent| { &m.id },
            |m: &mut PunchHoleSent| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &PunchHoleSent| { &m.relay_server },
            |m: &mut PunchHoleSent| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nat_type",
            |m: &PunchHoleSent| { &m.nat_type },
            |m: &mut PunchHoleSent| { &mut m.nat_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHoleSent>(
            "PunchHoleSent",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for PunchHoleSent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.socket_addr = is.read_bytes()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.relay_server = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.nat_type = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relay_server);
        }
        if self.nat_type != ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            my_size += ::protobuf::rt::enum_or_unknown_size(4, self.nat_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(3, &self.relay_server)?;
        }
        if self.nat_type != ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            os.write_enum(4, ::protobuf::ProtobufEnumOrUnknown::value(&self.nat_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PunchHoleSent {
        PunchHoleSent::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }

    fn default_instance() -> &'static PunchHoleSent {
        static instance: PunchHoleSent = PunchHoleSent {
            socket_addr: ::std::vec::Vec::new(),
            id: ::std::string::String::new(),
            relay_server: ::std::string::String::new(),
            nat_type: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PunchHoleSent {
    fn clear(&mut self) {
        self.socket_addr.clear();
        self.id.clear();
        self.relay_server.clear();
        self.nat_type = ::protobuf::ProtobufEnumOrUnknown::new(NatType::UNKNOWN_NAT);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PunchHoleSent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHoleSent {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterPk {
    // message fields
    pub id: ::std::string::String,
    pub uuid: ::std::vec::Vec<u8>,
    pub pk: ::std::vec::Vec<u8>,
    pub hostname: ::std::string::String,
    pub username: ::std::string::String,
    pub platform: ::std::string::String,
    pub localaddr: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterPk {
    fn default() -> &'a RegisterPk {
        <RegisterPk as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPk {
    pub fn new() -> RegisterPk {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RegisterPk| { &m.id },
            |m: &mut RegisterPk| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &RegisterPk| { &m.uuid },
            |m: &mut RegisterPk| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &RegisterPk| { &m.pk },
            |m: &mut RegisterPk| { &mut m.pk },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hostname",
            |m: &RegisterPk| { &m.hostname },
            |m: &mut RegisterPk| { &mut m.hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &RegisterPk| { &m.username },
            |m: &mut RegisterPk| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform",
            |m: &RegisterPk| { &m.platform },
            |m: &mut RegisterPk| { &mut m.platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "localaddr",
            |m: &RegisterPk| { &m.localaddr },
            |m: &mut RegisterPk| { &mut m.localaddr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &RegisterPk| { &m.version },
            |m: &mut RegisterPk| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPk>(
            "RegisterPk",
            7,
            fields,
        )
    }
}

impl ::protobuf::Message for RegisterPk {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.uuid = is.read_bytes()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk = is.read_bytes()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hostname = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.username = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.platform = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.localaddr = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.version = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.uuid);
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.pk);
        }
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.hostname);
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.username);
        }
        if !self.platform.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.platform);
        }
        if !self.localaddr.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.localaddr);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.uuid.is_empty() {
            os.write_bytes(2, &self.uuid)?;
        }
        if !self.pk.is_empty() {
            os.write_bytes(3, &self.pk)?;
        }
        if !self.hostname.is_empty() {
            os.write_string(4, &self.hostname)?;
        }
        if !self.username.is_empty() {
            os.write_string(5, &self.username)?;
        }
        if !self.platform.is_empty() {
            os.write_string(6, &self.platform)?;
        }
        if !self.localaddr.is_empty() {
            os.write_string(7, &self.localaddr)?;
        }
        if !self.version.is_empty() {
            os.write_string(8, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RegisterPk {
        RegisterPk::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 7)
    }

    fn default_instance() -> &'static RegisterPk {
        static instance: RegisterPk = RegisterPk {
            id: ::std::string::String::new(),
            uuid: ::std::vec::Vec::new(),
            pk: ::std::vec::Vec::new(),
            hostname: ::std::string::String::new(),
            username: ::std::string::String::new(),
            platform: ::std::string::String::new(),
            localaddr: ::std::string::String::new(),
            version: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RegisterPk {
    fn clear(&mut self) {
        self.id.clear();
        self.uuid.clear();
        self.pk.clear();
        self.hostname.clear();
        self.username.clear();
        self.platform.clear();
        self.localaddr.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterPk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPk {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterPkResponse {
    // message fields
    pub result: ::protobuf::ProtobufEnumOrUnknown<register_pk_response::Result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterPkResponse {
    fn default() -> &'a RegisterPkResponse {
        <RegisterPkResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPkResponse {
    pub fn new() -> RegisterPkResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &RegisterPkResponse| { &m.result },
            |m: &mut RegisterPkResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPkResponse>(
            "RegisterPkResponse",
            8,
            fields,
        )
    }
}

impl ::protobuf::Message for RegisterPkResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ::protobuf::ProtobufEnumOrUnknown::new(register_pk_response::Result::OK) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ::protobuf::ProtobufEnumOrUnknown::new(register_pk_response::Result::OK) {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&self.result))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RegisterPkResponse {
        RegisterPkResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 8)
    }

    fn default_instance() -> &'static RegisterPkResponse {
        static instance: RegisterPkResponse = RegisterPkResponse {
            result: ::protobuf::ProtobufEnumOrUnknown::from_i32(1),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RegisterPkResponse {
    fn clear(&mut self) {
        self.result = ::protobuf::ProtobufEnumOrUnknown::new(register_pk_response::Result::OK);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterPkResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPkResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RegisterPkResponse`
pub mod register_pk_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    pub enum Result {
        OK = 1,
        UUID_MISMATCH = 2,
        ID_EXISTS = 3,
        TOO_FREQUENT = 4,
        INVALID_ID_FORMAT = 5,
        NOT_SUPPORT = 6,
        SERVER_ERROR = 7,
    }

    impl ::protobuf::ProtobufEnum for Result {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                1 => ::std::option::Option::Some(Result::OK),
                2 => ::std::option::Option::Some(Result::UUID_MISMATCH),
                3 => ::std::option::Option::Some(Result::ID_EXISTS),
                4 => ::std::option::Option::Some(Result::TOO_FREQUENT),
                5 => ::std::option::Option::Some(Result::INVALID_ID_FORMAT),
                6 => ::std::option::Option::Some(Result::NOT_SUPPORT),
                7 => ::std::option::Option::Some(Result::SERVER_ERROR),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [Result] = &[
                Result::OK,
                Result::UUID_MISMATCH,
                Result::ID_EXISTS,
                Result::TOO_FREQUENT,
                Result::INVALID_ID_FORMAT,
                Result::NOT_SUPPORT,
                Result::SERVER_ERROR,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 2)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::OK
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Result {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<Result>("RegisterPkResponse.Result", 2)
        }
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PunchHoleResponse {
    // message fields
    pub socket_addr: ::std::vec::Vec<u8>,
    pub pk: ::std::vec::Vec<u8>,
    pub failure: ::protobuf::ProtobufEnumOrUnknown<punch_hole_response::Failure>,
    pub relay_server: ::std::string::String,
    pub other_failure: ::std::string::String,
    // message oneof groups
    pub union: ::std::option::Option<punch_hole_response::Union>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a PunchHoleResponse {
    fn default() -> &'a PunchHoleResponse {
        <PunchHoleResponse as ::protobuf::Message>::default_instance()
    }
}

impl PunchHoleResponse {
    pub fn new() -> PunchHoleResponse {
        ::std::default::Default::default()
    }

    // .hbb.NatType nat_type = 5;

    pub fn get_nat_type(&self) -> NatType {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::nat_type(v)) => ::protobuf::ProtobufEnumOrUnknown::enum_value_or_default(&v),
            _ => NatType::UNKNOWN_NAT,
        }
    }

    pub fn clear_nat_type(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_nat_type(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::nat_type(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nat_type(&mut self, v: NatType) {
        self.union = ::std::option::Option::Some(punch_hole_response::Union::nat_type(::protobuf::ProtobufEnumOrUnknown::new(v)))
    }

    // bool is_local = 6;

    pub fn get_is_local(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::is_local(v)) => v,
            _ => false,
        }
    }

    pub fn clear_is_local(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_is_local(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::is_local(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_is_local(&mut self, v: bool) {
        self.union = ::std::option::Option::Some(punch_hole_response::Union::is_local(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &PunchHoleResponse| { &m.socket_addr },
            |m: &mut PunchHoleResponse| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &PunchHoleResponse| { &m.pk },
            |m: &mut PunchHoleResponse| { &mut m.pk },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "failure",
            |m: &PunchHoleResponse| { &m.failure },
            |m: &mut PunchHoleResponse| { &mut m.failure },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &PunchHoleResponse| { &m.relay_server },
            |m: &mut PunchHoleResponse| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "nat_type",
            PunchHoleResponse::has_nat_type,
            PunchHoleResponse::get_nat_type,
            PunchHoleResponse::set_nat_type,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "is_local",
            PunchHoleResponse::has_is_local,
            PunchHoleResponse::get_is_local,
            PunchHoleResponse::set_is_local,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "other_failure",
            |m: &PunchHoleResponse| { &m.other_failure },
            |m: &mut PunchHoleResponse| { &mut m.other_failure },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHoleResponse>(
            "PunchHoleResponse",
            9,
            fields,
        )
    }
}

impl ::protobuf::Message for PunchHoleResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.socket_addr = is.read_bytes()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pk = is.read_bytes()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.failure = is.read_enum_or_unknown()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.relay_server = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(punch_hole_response::Union::nat_type(is.read_enum_or_unknown()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(punch_hole_response::Union::is_local(is.read_bool()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.other_failure = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.pk);
        }
        if self.failure != ::protobuf::ProtobufEnumOrUnknown::new(punch_hole_response::Failure::ID_NOT_EXIST) {
            my_size += ::protobuf::rt::enum_or_unknown_size(3, self.failure);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.relay_server);
        }
        if !self.other_failure.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.other_failure);
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &punch_hole_response::Union::nat_type(v) => {
                    my_size += ::protobuf::rt::enum_or_unknown_size(5, v);
                },
                &punch_hole_response::Union::is_local(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.pk.is_empty() {
            os.write_bytes(2, &self.pk)?;
        }
        if self.failure != ::protobuf::ProtobufEnumOrUnknown::new(punch_hole_response::Failure::ID_NOT_EXIST) {
            os.write_enum(3, ::protobuf::ProtobufEnumOrUnknown::value(&self.failure))?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(4, &self.relay_server)?;
        }
        if !self.other_failure.is_empty() {
            os.write_string(7, &self.other_failure)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &punch_hole_response::Union::nat_type(v) => {
                    os.write_enum(5, ::protobuf::ProtobufEnumOrUnknown::value(&v))?;
                },
                &punch_hole_response::Union::is_local(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> PunchHoleResponse {
        PunchHoleResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 9)
    }

    fn default_instance() -> &'static PunchHoleResponse {
        static instance: PunchHoleResponse = PunchHoleResponse {
            socket_addr: ::std::vec::Vec::new(),
            pk: ::std::vec::Vec::new(),
            failure: ::protobuf::ProtobufEnumOrUnknown::from_i32(1),
            relay_server: ::std::string::String::new(),
            other_failure: ::std::string::String::new(),
            union: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for PunchHoleResponse {
    fn clear(&mut self) {
        self.socket_addr.clear();
        self.pk.clear();
        self.failure = ::protobuf::ProtobufEnumOrUnknown::new(punch_hole_response::Failure::ID_NOT_EXIST);
        self.relay_server.clear();
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.other_failure.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PunchHoleResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHoleResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PunchHoleResponse`
pub mod punch_hole_response {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Union {
        nat_type(::protobuf::ProtobufEnumOrUnknown<super::NatType>),
        is_local(bool),
    }

    impl ::protobuf::Oneof for Union {
    }
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    pub enum Failure {
        ID_NOT_EXIST = 1,
        OFFLINE = 2,
        LICENCE_MISMATCH = 3,
        LICENCE_OVERUSE = 4,
    }

    impl ::protobuf::ProtobufEnum for Failure {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Failure> {
            match value {
                1 => ::std::option::Option::Some(Failure::ID_NOT_EXIST),
                2 => ::std::option::Option::Some(Failure::OFFLINE),
                3 => ::std::option::Option::Some(Failure::LICENCE_MISMATCH),
                4 => ::std::option::Option::Some(Failure::LICENCE_OVERUSE),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [Failure] = &[
                Failure::ID_NOT_EXIST,
                Failure::OFFLINE,
                Failure::LICENCE_MISMATCH,
                Failure::LICENCE_OVERUSE,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 3)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for Failure {
        fn default() -> Self {
            Failure::ID_NOT_EXIST
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Failure {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl Failure {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<Failure>("PunchHoleResponse.Failure", 3)
        }
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConfigUpdate {
    // message fields
    pub serial: i32,
    pub rendezvous_servers: ::std::vec::Vec<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConfigUpdate {
    fn default() -> &'a ConfigUpdate {
        <ConfigUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ConfigUpdate {
    pub fn new() -> ConfigUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &ConfigUpdate| { &m.serial },
            |m: &mut ConfigUpdate| { &mut m.serial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rendezvous_servers",
            |m: &ConfigUpdate| { &m.rendezvous_servers },
            |m: &mut ConfigUpdate| { &mut m.rendezvous_servers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConfigUpdate>(
            "ConfigUpdate",
            10,
            fields,
        )
    }
}

impl ::protobuf::Message for ConfigUpdate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.serial = is.read_int32()?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.rendezvous_servers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.serial != 0 {
            my_size += ::protobuf::rt::value_size(1, self.serial, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.rendezvous_servers {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.serial != 0 {
            os.write_int32(1, self.serial)?;
        }
        for v in &self.rendezvous_servers {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ConfigUpdate {
        ConfigUpdate::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 10)
    }

    fn default_instance() -> &'static ConfigUpdate {
        static instance: ConfigUpdate = ConfigUpdate {
            serial: 0,
            rendezvous_servers: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ConfigUpdate {
    fn clear(&mut self) {
        self.serial = 0;
        self.rendezvous_servers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfigUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigUpdate {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestRelay {
    // message fields
    pub id: ::std::string::String,
    pub uuid: ::std::string::String,
    pub socket_addr: ::std::vec::Vec<u8>,
    pub relay_server: ::std::string::String,
    pub secure: bool,
    pub conn_type: ::protobuf::ProtobufEnumOrUnknown<ConnType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestRelay {
    fn default() -> &'a RequestRelay {
        <RequestRelay as ::protobuf::Message>::default_instance()
    }
}

impl RequestRelay {
    pub fn new() -> RequestRelay {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RequestRelay| { &m.id },
            |m: &mut RequestRelay| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &RequestRelay| { &m.uuid },
            |m: &mut RequestRelay| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &RequestRelay| { &m.socket_addr },
            |m: &mut RequestRelay| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &RequestRelay| { &m.relay_server },
            |m: &mut RequestRelay| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secure",
            |m: &RequestRelay| { &m.secure },
            |m: &mut RequestRelay| { &mut m.secure },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "conn_type",
            |m: &RequestRelay| { &m.conn_type },
            |m: &mut RequestRelay| { &mut m.conn_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestRelay>(
            "RequestRelay",
            11,
            fields,
        )
    }
}

impl ::protobuf::Message for RequestRelay {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.uuid = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.socket_addr = is.read_bytes()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.relay_server = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.secure = is.read_bool()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.conn_type = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uuid);
        }
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.socket_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.relay_server);
        }
        if self.secure != false {
            my_size += 2;
        }
        if self.conn_type != ::protobuf::ProtobufEnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            my_size += ::protobuf::rt::enum_or_unknown_size(7, self.conn_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.uuid.is_empty() {
            os.write_string(2, &self.uuid)?;
        }
        if !self.socket_addr.is_empty() {
            os.write_bytes(3, &self.socket_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(4, &self.relay_server)?;
        }
        if self.secure != false {
            os.write_bool(5, self.secure)?;
        }
        if self.conn_type != ::protobuf::ProtobufEnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            os.write_enum(7, ::protobuf::ProtobufEnumOrUnknown::value(&self.conn_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RequestRelay {
        RequestRelay::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 11)
    }

    fn default_instance() -> &'static RequestRelay {
        static instance: RequestRelay = RequestRelay {
            id: ::std::string::String::new(),
            uuid: ::std::string::String::new(),
            socket_addr: ::std::vec::Vec::new(),
            relay_server: ::std::string::String::new(),
            secure: false,
            conn_type: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RequestRelay {
    fn clear(&mut self) {
        self.id.clear();
        self.uuid.clear();
        self.socket_addr.clear();
        self.relay_server.clear();
        self.secure = false;
        self.conn_type = ::protobuf::ProtobufEnumOrUnknown::new(ConnType::DEFAULT_CONN);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestRelay {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestRelay {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct RelayResponse {
    // message fields
    pub socket_addr: ::std::vec::Vec<u8>,
    pub uuid: ::std::string::String,
    pub relay_server: ::std::string::String,
    pub refuse_reason: ::std::string::String,
    pub version: ::std::string::String,
    // message oneof groups
    pub union: ::std::option::Option<relay_response::Union>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelayResponse {
    fn default() -> &'a RelayResponse {
        <RelayResponse as ::protobuf::Message>::default_instance()
    }
}

impl RelayResponse {
    pub fn new() -> RelayResponse {
        ::std::default::Default::default()
    }

    // string id = 4;

    pub fn get_id(&self) -> &str {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::id(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_id(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.union = ::std::option::Option::Some(relay_response::Union::id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(relay_response::Union::id(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(relay_response::Union::id(::std::string::String::new()));
        }
        match self.union {
            ::std::option::Option::Some(relay_response::Union::id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        if self.has_id() {
            match self.union.take() {
                ::std::option::Option::Some(relay_response::Union::id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes pk = 5;

    pub fn get_pk(&self) -> &[u8] {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::pk(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_pk(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_pk(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::pk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: ::std::vec::Vec<u8>) {
        self.union = ::std::option::Option::Some(relay_response::Union::pk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(relay_response::Union::pk(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(relay_response::Union::pk(::std::vec::Vec::new()));
        }
        match self.union {
            ::std::option::Option::Some(relay_response::Union::pk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pk(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_pk() {
            match self.union.take() {
                ::std::option::Option::Some(relay_response::Union::pk(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &RelayResponse| { &m.socket_addr },
            |m: &mut RelayResponse| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &RelayResponse| { &m.uuid },
            |m: &mut RelayResponse| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &RelayResponse| { &m.relay_server },
            |m: &mut RelayResponse| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "id",
            RelayResponse::has_id,
            RelayResponse::get_id,
            RelayResponse::set_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "pk",
            RelayResponse::has_pk,
            RelayResponse::get_pk,
            RelayResponse::set_pk,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "refuse_reason",
            |m: &RelayResponse| { &m.refuse_reason },
            |m: &mut RelayResponse| { &mut m.refuse_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &RelayResponse| { &m.version },
            |m: &mut RelayResponse| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RelayResponse>(
            "RelayResponse",
            12,
            fields,
        )
    }
}

impl ::protobuf::Message for RelayResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.socket_addr = is.read_bytes()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.uuid = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.relay_server = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(relay_response::Union::id(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(relay_response::Union::pk(is.read_bytes()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.refuse_reason = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.version = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uuid);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relay_server);
        }
        if !self.refuse_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.refuse_reason);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.version);
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &relay_response::Union::id(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &relay_response::Union::pk(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.uuid.is_empty() {
            os.write_string(2, &self.uuid)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(3, &self.relay_server)?;
        }
        if !self.refuse_reason.is_empty() {
            os.write_string(6, &self.refuse_reason)?;
        }
        if !self.version.is_empty() {
            os.write_string(7, &self.version)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &relay_response::Union::id(ref v) => {
                    os.write_string(4, v)?;
                },
                &relay_response::Union::pk(ref v) => {
                    os.write_bytes(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RelayResponse {
        RelayResponse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 12)
    }

    fn default_instance() -> &'static RelayResponse {
        static instance: RelayResponse = RelayResponse {
            socket_addr: ::std::vec::Vec::new(),
            uuid: ::std::string::String::new(),
            relay_server: ::std::string::String::new(),
            refuse_reason: ::std::string::String::new(),
            version: ::std::string::String::new(),
            union: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RelayResponse {
    fn clear(&mut self) {
        self.socket_addr.clear();
        self.uuid.clear();
        self.relay_server.clear();
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.refuse_reason.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelayResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelayResponse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RelayResponse`
pub mod relay_response {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Union {
        id(::std::string::String),
        pk(::std::vec::Vec<u8>),
    }

    impl ::protobuf::Oneof for Union {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SoftwareUpdate {
    // message fields
    pub url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a SoftwareUpdate {
    fn default() -> &'a SoftwareUpdate {
        <SoftwareUpdate as ::protobuf::Message>::default_instance()
    }
}

impl SoftwareUpdate {
    pub fn new() -> SoftwareUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &SoftwareUpdate| { &m.url },
            |m: &mut SoftwareUpdate| { &mut m.url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SoftwareUpdate>(
            "SoftwareUpdate",
            13,
            fields,
        )
    }
}

impl ::protobuf::Message for SoftwareUpdate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.url = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> SoftwareUpdate {
        SoftwareUpdate::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 13)
    }

    fn default_instance() -> &'static SoftwareUpdate {
        static instance: SoftwareUpdate = SoftwareUpdate {
            url: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for SoftwareUpdate {
    fn clear(&mut self) {
        self.url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SoftwareUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SoftwareUpdate {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct FetchLocalAddr {
    // message fields
    pub socket_addr: ::std::vec::Vec<u8>,
    pub relay_server: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a FetchLocalAddr {
    fn default() -> &'a FetchLocalAddr {
        <FetchLocalAddr as ::protobuf::Message>::default_instance()
    }
}

impl FetchLocalAddr {
    pub fn new() -> FetchLocalAddr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &FetchLocalAddr| { &m.socket_addr },
            |m: &mut FetchLocalAddr| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &FetchLocalAddr| { &m.relay_server },
            |m: &mut FetchLocalAddr| { &mut m.relay_server },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FetchLocalAddr>(
            "FetchLocalAddr",
            14,
            fields,
        )
    }
}

impl ::protobuf::Message for FetchLocalAddr {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.socket_addr = is.read_bytes()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.relay_server = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.relay_server);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(2, &self.relay_server)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> FetchLocalAddr {
        FetchLocalAddr::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 14)
    }

    fn default_instance() -> &'static FetchLocalAddr {
        static instance: FetchLocalAddr = FetchLocalAddr {
            socket_addr: ::std::vec::Vec::new(),
            relay_server: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for FetchLocalAddr {
    fn clear(&mut self) {
        self.socket_addr.clear();
        self.relay_server.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FetchLocalAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FetchLocalAddr {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalAddr {
    // message fields
    pub socket_addr: ::std::vec::Vec<u8>,
    pub local_addr: ::std::vec::Vec<u8>,
    pub relay_server: ::std::string::String,
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalAddr {
    fn default() -> &'a LocalAddr {
        <LocalAddr as ::protobuf::Message>::default_instance()
    }
}

impl LocalAddr {
    pub fn new() -> LocalAddr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &LocalAddr| { &m.socket_addr },
            |m: &mut LocalAddr| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "local_addr",
            |m: &LocalAddr| { &m.local_addr },
            |m: &mut LocalAddr| { &mut m.local_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &LocalAddr| { &m.relay_server },
            |m: &mut LocalAddr| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &LocalAddr| { &m.id },
            |m: &mut LocalAddr| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LocalAddr>(
            "LocalAddr",
            15,
            fields,
        )
    }
}

impl ::protobuf::Message for LocalAddr {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.socket_addr = is.read_bytes()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.local_addr = is.read_bytes()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.relay_server = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.local_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.local_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relay_server);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.local_addr.is_empty() {
            os.write_bytes(2, &self.local_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(3, &self.relay_server)?;
        }
        if !self.id.is_empty() {
            os.write_string(4, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> LocalAddr {
        LocalAddr::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 15)
    }

    fn default_instance() -> &'static LocalAddr {
        static instance: LocalAddr = LocalAddr {
            socket_addr: ::std::vec::Vec::new(),
            local_addr: ::std::vec::Vec::new(),
            relay_server: ::std::string::String::new(),
            id: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for LocalAddr {
    fn clear(&mut self) {
        self.socket_addr.clear();
        self.local_addr.clear();
        self.relay_server.clear();
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalAddr {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct RendezvousMessage {
    // message oneof groups
    pub union: ::std::option::Option<rendezvous_message::Union>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RendezvousMessage {
    fn default() -> &'a RendezvousMessage {
        <RendezvousMessage as ::protobuf::Message>::default_instance()
    }
}

impl RendezvousMessage {
    pub fn new() -> RendezvousMessage {
        ::std::default::Default::default()
    }

    // .hbb.RegisterPeer register_peer = 6;

    pub fn get_register_peer(&self) -> &RegisterPeer {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_peer(ref v)) => v,
            _ => <RegisterPeer as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_peer(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_peer(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_peer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_peer(&mut self, v: RegisterPeer) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::register_peer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_peer(&mut self) -> &mut RegisterPeer {
        if let ::std::option::Option::Some(rendezvous_message::Union::register_peer(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::register_peer(RegisterPeer::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_peer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_peer(&mut self) -> RegisterPeer {
        if self.has_register_peer() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::register_peer(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPeer::new()
        }
    }

    // .hbb.RegisterPeerResponse register_peer_response = 7;

    pub fn get_register_peer_response(&self) -> &RegisterPeerResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(ref v)) => v,
            _ => <RegisterPeerResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_peer_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_peer_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_peer_response(&mut self, v: RegisterPeerResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_peer_response(&mut self) -> &mut RegisterPeerResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(RegisterPeerResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_peer_response(&mut self) -> RegisterPeerResponse {
        if self.has_register_peer_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPeerResponse::new()
        }
    }

    // .hbb.PunchHoleRequest punch_hole_request = 8;

    pub fn get_punch_hole_request(&self) -> &PunchHoleRequest {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(ref v)) => v,
            _ => <PunchHoleRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole_request(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole_request(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole_request(&mut self, v: PunchHoleRequest) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole_request(&mut self) -> &mut PunchHoleRequest {
        if let ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(PunchHoleRequest::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole_request(&mut self) -> PunchHoleRequest {
        if self.has_punch_hole_request() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHoleRequest::new()
        }
    }

    // .hbb.PunchHole punch_hole = 9;

    pub fn get_punch_hole(&self) -> &PunchHole {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole(ref v)) => v,
            _ => <PunchHole as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole(&mut self, v: PunchHole) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole(&mut self) -> &mut PunchHole {
        if let ::std::option::Option::Some(rendezvous_message::Union::punch_hole(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole(PunchHole::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole(&mut self) -> PunchHole {
        if self.has_punch_hole() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::punch_hole(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHole::new()
        }
    }

    // .hbb.PunchHoleSent punch_hole_sent = 10;

    pub fn get_punch_hole_sent(&self) -> &PunchHoleSent {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(ref v)) => v,
            _ => <PunchHoleSent as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole_sent(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole_sent(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole_sent(&mut self, v: PunchHoleSent) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole_sent(&mut self) -> &mut PunchHoleSent {
        if let ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(PunchHoleSent::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole_sent(&mut self) -> PunchHoleSent {
        if self.has_punch_hole_sent() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHoleSent::new()
        }
    }

    // .hbb.PunchHoleResponse punch_hole_response = 11;

    pub fn get_punch_hole_response(&self) -> &PunchHoleResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(ref v)) => v,
            _ => <PunchHoleResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole_response(&mut self, v: PunchHoleResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole_response(&mut self) -> &mut PunchHoleResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(PunchHoleResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole_response(&mut self) -> PunchHoleResponse {
        if self.has_punch_hole_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHoleResponse::new()
        }
    }

    // .hbb.FetchLocalAddr fetch_local_addr = 12;

    pub fn get_fetch_local_addr(&self) -> &FetchLocalAddr {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(ref v)) => v,
            _ => <FetchLocalAddr as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fetch_local_addr(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_fetch_local_addr(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fetch_local_addr(&mut self, v: FetchLocalAddr) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fetch_local_addr(&mut self) -> &mut FetchLocalAddr {
        if let ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(FetchLocalAddr::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fetch_local_addr(&mut self) -> FetchLocalAddr {
        if self.has_fetch_local_addr() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(v)) => v,
                _ => panic!(),
            }
        } else {
            FetchLocalAddr::new()
        }
    }

    // .hbb.LocalAddr local_addr = 13;

    pub fn get_local_addr(&self) -> &LocalAddr {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::local_addr(ref v)) => v,
            _ => <LocalAddr as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_local_addr(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_local_addr(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::local_addr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local_addr(&mut self, v: LocalAddr) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::local_addr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local_addr(&mut self) -> &mut LocalAddr {
        if let ::std::option::Option::Some(rendezvous_message::Union::local_addr(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::local_addr(LocalAddr::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::local_addr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local_addr(&mut self) -> LocalAddr {
        if self.has_local_addr() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::local_addr(v)) => v,
                _ => panic!(),
            }
        } else {
            LocalAddr::new()
        }
    }

    // .hbb.ConfigUpdate configure_update = 14;

    pub fn get_configure_update(&self) -> &ConfigUpdate {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::configure_update(ref v)) => v,
            _ => <ConfigUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_configure_update(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_configure_update(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::configure_update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_configure_update(&mut self, v: ConfigUpdate) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::configure_update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_configure_update(&mut self) -> &mut ConfigUpdate {
        if let ::std::option::Option::Some(rendezvous_message::Union::configure_update(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::configure_update(ConfigUpdate::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::configure_update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_configure_update(&mut self) -> ConfigUpdate {
        if self.has_configure_update() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::configure_update(v)) => v,
                _ => panic!(),
            }
        } else {
            ConfigUpdate::new()
        }
    }

    // .hbb.RegisterPk register_pk = 15;

    pub fn get_register_pk(&self) -> &RegisterPk {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_pk(ref v)) => v,
            _ => <RegisterPk as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_pk(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_pk(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_pk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_pk(&mut self, v: RegisterPk) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::register_pk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_pk(&mut self) -> &mut RegisterPk {
        if let ::std::option::Option::Some(rendezvous_message::Union::register_pk(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::register_pk(RegisterPk::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_pk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_pk(&mut self) -> RegisterPk {
        if self.has_register_pk() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::register_pk(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPk::new()
        }
    }

    // .hbb.RegisterPkResponse register_pk_response = 16;

    pub fn get_register_pk_response(&self) -> &RegisterPkResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(ref v)) => v,
            _ => <RegisterPkResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_pk_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_pk_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_pk_response(&mut self, v: RegisterPkResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_pk_response(&mut self) -> &mut RegisterPkResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(RegisterPkResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_pk_response(&mut self) -> RegisterPkResponse {
        if self.has_register_pk_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPkResponse::new()
        }
    }

    // .hbb.SoftwareUpdate software_update = 17;

    pub fn get_software_update(&self) -> &SoftwareUpdate {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::software_update(ref v)) => v,
            _ => <SoftwareUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_software_update(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_software_update(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::software_update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_software_update(&mut self, v: SoftwareUpdate) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::software_update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_software_update(&mut self) -> &mut SoftwareUpdate {
        if let ::std::option::Option::Some(rendezvous_message::Union::software_update(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::software_update(SoftwareUpdate::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::software_update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_software_update(&mut self) -> SoftwareUpdate {
        if self.has_software_update() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::software_update(v)) => v,
                _ => panic!(),
            }
        } else {
            SoftwareUpdate::new()
        }
    }

    // .hbb.RequestRelay request_relay = 18;

    pub fn get_request_relay(&self) -> &RequestRelay {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::request_relay(ref v)) => v,
            _ => <RequestRelay as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_request_relay(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_request_relay(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::request_relay(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request_relay(&mut self, v: RequestRelay) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::request_relay(v))
    }

    // Mutable pointer to the field.
    pub fn mut_request_relay(&mut self) -> &mut RequestRelay {
        if let ::std::option::Option::Some(rendezvous_message::Union::request_relay(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::request_relay(RequestRelay::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::request_relay(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_request_relay(&mut self) -> RequestRelay {
        if self.has_request_relay() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::request_relay(v)) => v,
                _ => panic!(),
            }
        } else {
            RequestRelay::new()
        }
    }

    // .hbb.RelayResponse relay_response = 19;

    pub fn get_relay_response(&self) -> &RelayResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::relay_response(ref v)) => v,
            _ => <RelayResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_relay_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_relay_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::relay_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_relay_response(&mut self, v: RelayResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::relay_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_relay_response(&mut self) -> &mut RelayResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::relay_response(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::relay_response(RelayResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::relay_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_relay_response(&mut self) -> RelayResponse {
        if self.has_relay_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::relay_response(v)) => v,
                _ => panic!(),
            }
        } else {
            RelayResponse::new()
        }
    }

    // .hbb.TestNatRequest test_nat_request = 20;

    pub fn get_test_nat_request(&self) -> &TestNatRequest {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(ref v)) => v,
            _ => <TestNatRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_test_nat_request(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_test_nat_request(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_test_nat_request(&mut self, v: TestNatRequest) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_test_nat_request(&mut self) -> &mut TestNatRequest {
        if let ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(TestNatRequest::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_test_nat_request(&mut self) -> TestNatRequest {
        if self.has_test_nat_request() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(v)) => v,
                _ => panic!(),
            }
        } else {
            TestNatRequest::new()
        }
    }

    // .hbb.TestNatResponse test_nat_response = 21;

    pub fn get_test_nat_response(&self) -> &TestNatResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(ref v)) => v,
            _ => <TestNatResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_test_nat_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_test_nat_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_test_nat_response(&mut self, v: TestNatResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_test_nat_response(&mut self) -> &mut TestNatResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(TestNatResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_test_nat_response(&mut self) -> TestNatResponse {
        if self.has_test_nat_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(v)) => v,
                _ => panic!(),
            }
        } else {
            TestNatResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPeer>(
            "register_peer",
            RendezvousMessage::has_register_peer,
            RendezvousMessage::get_register_peer,
            RendezvousMessage::mut_register_peer,
            RendezvousMessage::set_register_peer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPeerResponse>(
            "register_peer_response",
            RendezvousMessage::has_register_peer_response,
            RendezvousMessage::get_register_peer_response,
            RendezvousMessage::mut_register_peer_response,
            RendezvousMessage::set_register_peer_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHoleRequest>(
            "punch_hole_request",
            RendezvousMessage::has_punch_hole_request,
            RendezvousMessage::get_punch_hole_request,
            RendezvousMessage::mut_punch_hole_request,
            RendezvousMessage::set_punch_hole_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHole>(
            "punch_hole",
            RendezvousMessage::has_punch_hole,
            RendezvousMessage::get_punch_hole,
            RendezvousMessage::mut_punch_hole,
            RendezvousMessage::set_punch_hole,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHoleSent>(
            "punch_hole_sent",
            RendezvousMessage::has_punch_hole_sent,
            RendezvousMessage::get_punch_hole_sent,
            RendezvousMessage::mut_punch_hole_sent,
            RendezvousMessage::set_punch_hole_sent,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHoleResponse>(
            "punch_hole_response",
            RendezvousMessage::has_punch_hole_response,
            RendezvousMessage::get_punch_hole_response,
            RendezvousMessage::mut_punch_hole_response,
            RendezvousMessage::set_punch_hole_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, FetchLocalAddr>(
            "fetch_local_addr",
            RendezvousMessage::has_fetch_local_addr,
            RendezvousMessage::get_fetch_local_addr,
            RendezvousMessage::mut_fetch_local_addr,
            RendezvousMessage::set_fetch_local_addr,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LocalAddr>(
            "local_addr",
            RendezvousMessage::has_local_addr,
            RendezvousMessage::get_local_addr,
            RendezvousMessage::mut_local_addr,
            RendezvousMessage::set_local_addr,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ConfigUpdate>(
            "configure_update",
            RendezvousMessage::has_configure_update,
            RendezvousMessage::get_configure_update,
            RendezvousMessage::mut_configure_update,
            RendezvousMessage::set_configure_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPk>(
            "register_pk",
            RendezvousMessage::has_register_pk,
            RendezvousMessage::get_register_pk,
            RendezvousMessage::mut_register_pk,
            RendezvousMessage::set_register_pk,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPkResponse>(
            "register_pk_response",
            RendezvousMessage::has_register_pk_response,
            RendezvousMessage::get_register_pk_response,
            RendezvousMessage::mut_register_pk_response,
            RendezvousMessage::set_register_pk_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SoftwareUpdate>(
            "software_update",
            RendezvousMessage::has_software_update,
            RendezvousMessage::get_software_update,
            RendezvousMessage::mut_software_update,
            RendezvousMessage::set_software_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RequestRelay>(
            "request_relay",
            RendezvousMessage::has_request_relay,
            RendezvousMessage::get_request_relay,
            RendezvousMessage::mut_request_relay,
            RendezvousMessage::set_request_relay,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RelayResponse>(
            "relay_response",
            RendezvousMessage::has_relay_response,
            RendezvousMessage::get_relay_response,
            RendezvousMessage::mut_relay_response,
            RendezvousMessage::set_relay_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestNatRequest>(
            "test_nat_request",
            RendezvousMessage::has_test_nat_request,
            RendezvousMessage::get_test_nat_request,
            RendezvousMessage::mut_test_nat_request,
            RendezvousMessage::set_test_nat_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestNatResponse>(
            "test_nat_response",
            RendezvousMessage::has_test_nat_response,
            RendezvousMessage::get_test_nat_response,
            RendezvousMessage::mut_test_nat_response,
            RendezvousMessage::set_test_nat_response,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RendezvousMessage>(
            "RendezvousMessage",
            16,
            fields,
        )
    }
}

impl ::protobuf::Message for RendezvousMessage {
    fn is_initialized(&self) -> bool {
        if let Some(rendezvous_message::Union::register_peer(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::register_peer_response(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::punch_hole_request(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::punch_hole(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::punch_hole_sent(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::punch_hole_response(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::fetch_local_addr(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::local_addr(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::configure_update(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::register_pk(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::register_pk_response(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::software_update(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::request_relay(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::relay_response(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::test_nat_request(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(rendezvous_message::Union::test_nat_response(ref v)) = self.union {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::register_peer(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::register_peer_response(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_request(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_sent(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::punch_hole_response(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::fetch_local_addr(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::local_addr(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::configure_update(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::register_pk(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::register_pk_response(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::software_update(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::request_relay(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::relay_response(is.read_message()?));
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::test_nat_request(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::test_nat_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &rendezvous_message::Union::register_peer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::register_peer_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::punch_hole_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::punch_hole(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::punch_hole_sent(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::punch_hole_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::fetch_local_addr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::local_addr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::configure_update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::register_pk(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::register_pk_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::software_update(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::request_relay(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::relay_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::test_nat_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &rendezvous_message::Union::test_nat_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &rendezvous_message::Union::register_peer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &rendezvous_message::Union::register_peer_response(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &rendezvous_message::Union::punch_hole_request(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &rendezvous_message::Union::punch_hole(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &rendezvous_message::Union::punch_hole_sent(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &rendezvous_message::Union::punch_hole_response(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &rendezvous_message::Union::fetch_local_addr(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &rendezvous_message::Union::local_addr(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &rendezvous_message::Union::configure_update(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &rendezvous_message::Union::register_pk(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &rendezvous_message::Union::register_pk_response(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
                },
                &rendezvous_message::Union::software_update(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
                },
                &rendezvous_message::Union::request_relay(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
                },
                &rendezvous_message::Union::relay_response(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
                },
                &rendezvous_message::Union::test_nat_request(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
                },
                &rendezvous_message::Union::test_nat_response(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RendezvousMessage {
        RendezvousMessage::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 16)
    }

    fn default_instance() -> &'static RendezvousMessage {
        static instance: RendezvousMessage = RendezvousMessage {
            union: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for RendezvousMessage {
    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RendezvousMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RendezvousMessage {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RendezvousMessage`
pub mod rendezvous_message {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Union {
        register_peer(super::RegisterPeer),
        register_peer_response(super::RegisterPeerResponse),
        punch_hole_request(super::PunchHoleRequest),
        punch_hole(super::PunchHole),
        punch_hole_sent(super::PunchHoleSent),
        punch_hole_response(super::PunchHoleResponse),
        fetch_local_addr(super::FetchLocalAddr),
        local_addr(super::LocalAddr),
        configure_update(super::ConfigUpdate),
        register_pk(super::RegisterPk),
        register_pk_response(super::RegisterPkResponse),
        software_update(super::SoftwareUpdate),
        request_relay(super::RequestRelay),
        relay_response(super::RelayResponse),
        test_nat_request(super::TestNatRequest),
        test_nat_response(super::TestNatResponse),
    }

    impl ::protobuf::Oneof for Union {
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum ConnType {
    DEFAULT_CONN = 0,
    FILE_TRANSFER = 1,
    PORT_FORWARD = 2,
    RDP = 3,
}

impl ::protobuf::ProtobufEnum for ConnType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConnType> {
        match value {
            0 => ::std::option::Option::Some(ConnType::DEFAULT_CONN),
            1 => ::std::option::Option::Some(ConnType::FILE_TRANSFER),
            2 => ::std::option::Option::Some(ConnType::PORT_FORWARD),
            3 => ::std::option::Option::Some(ConnType::RDP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConnType] = &[
            ConnType::DEFAULT_CONN,
            ConnType::FILE_TRANSFER,
            ConnType::PORT_FORWARD,
            ConnType::RDP,
        ];
        values
    }

    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 0)
    }
}

impl ::std::default::Default for ConnType {
    fn default() -> Self {
        ConnType::DEFAULT_CONN
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnType {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
}

impl ConnType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<ConnType>("ConnType", 0)
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum NatType {
    UNKNOWN_NAT = 0,
    ASYMMETRIC = 1,
    SYMMETRIC = 2,
}

impl ::protobuf::ProtobufEnum for NatType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NatType> {
        match value {
            0 => ::std::option::Option::Some(NatType::UNKNOWN_NAT),
            1 => ::std::option::Option::Some(NatType::ASYMMETRIC),
            2 => ::std::option::Option::Some(NatType::SYMMETRIC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NatType] = &[
            NatType::UNKNOWN_NAT,
            NatType::ASYMMETRIC,
            NatType::SYMMETRIC,
        ];
        values
    }

    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 1)
    }
}

impl ::std::default::Default for NatType {
    fn default() -> Self {
        NatType::UNKNOWN_NAT
    }
}

impl ::protobuf::reflect::ProtobufValue for NatType {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
}

impl NatType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<NatType>("NatType", 1)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10rendezvous.proto\x12\x03hbb\"<\n\x0cRegisterPeer\x12\x10\n\x02id\
    \x18\x01\x20\x01(\tR\x02idB\0\x12\x18\n\x06serial\x18\x02\x20\x01(\x05R\
    \x06serialB\0:\0\"9\n\x14RegisterPeerResponse\x12\x1f\n\nrequest_pk\x18\
    \x02\x20\x01(\x08R\trequestPkB\0:\0\"\x7f\n\x10PunchHoleRequest\x12\x10\
    \n\x02id\x18\x01\x20\x01(\tR\x02idB\0\x12)\n\x08nat_type\x18\x02\x20\x01\
    (\x0e2\x0c.hbb.NatTypeR\x07natTypeB\0\x12,\n\tconn_type\x18\x04\x20\x01(\
    \x0e2\r.hbb.ConnTypeR\x08connTypeB\0:\0\"\x80\x01\n\tPunchHole\x12!\n\
    \x0bsocket_addr\x18\x01\x20\x01(\x0cR\nsocketAddrB\0\x12#\n\x0crelay_ser\
    ver\x18\x02\x20\x01(\tR\x0brelayServerB\0\x12)\n\x08nat_type\x18\x03\x20\
    \x01(\x0e2\x0c.hbb.NatTypeR\x07natTypeB\0:\0\",\n\x0eTestNatRequest\x12\
    \x18\n\x06serial\x18\x01\x20\x01(\x05R\x06serialB\0:\0\"N\n\x0fTestNatRe\
    sponse\x12\x14\n\x04port\x18\x01\x20\x01(\x05R\x04portB\0\x12#\n\x02cu\
    \x18\x02\x20\x01(\x0b2\x11.hbb.ConfigUpdateR\x02cuB\0:\0\"\x96\x01\n\rPu\
    nchHoleSent\x12!\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\nsocketAddrB\0\
    \x12\x10\n\x02id\x18\x02\x20\x01(\tR\x02idB\0\x12#\n\x0crelay_server\x18\
    \x03\x20\x01(\tR\x0brelayServerB\0\x12)\n\x08nat_type\x18\x04\x20\x01(\
    \x0e2\x0c.hbb.NatTypeR\x07natTypeB\0:\0\"\xde\x01\n\nRegisterPk\x12\x10\
    \n\x02id\x18\x01\x20\x01(\tR\x02idB\0\x12\x14\n\x04uuid\x18\x02\x20\x01(\
    \x0cR\x04uuidB\0\x12\x10\n\x02pk\x18\x03\x20\x01(\x0cR\x02pkB\0\x12\x1c\
    \n\x08hostname\x18\x04\x20\x01(\tR\x08hostnameB\0\x12\x1c\n\x08username\
    \x18\x05\x20\x01(\tR\x08usernameB\0\x12\x1c\n\x08platform\x18\x06\x20\
    \x01(\tR\x08platformB\0\x12\x1e\n\tlocaladdr\x18\x07\x20\x01(\tR\tlocala\
    ddrB\0\x12\x1a\n\x07version\x18\x08\x20\x01(\tR\x07versionB\0:\0\"\xe1\
    \x01\n\x12RegisterPkResponse\x128\n\x06result\x18\x01\x20\x01(\x0e2\x1e.\
    hbb.RegisterPkResponse.ResultR\x06resultB\0\"\x8e\x01\n\x06Result\x12\
    \x08\n\x02OK\x10\x01\x1a\0\x12\x13\n\rUUID_MISMATCH\x10\x02\x1a\0\x12\
    \x0f\n\tID_EXISTS\x10\x03\x1a\0\x12\x12\n\x0cTOO_FREQUENT\x10\x04\x1a\0\
    \x12\x17\n\x11INVALID_ID_FORMAT\x10\x05\x1a\0\x12\x11\n\x0bNOT_SUPPORT\
    \x10\x06\x1a\0\x12\x12\n\x0cSERVER_ERROR\x10\x07\x1a\0\x1a\0:\0\"\x88\
    \x03\n\x11PunchHoleResponse\x12!\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\
    \nsocketAddrB\0\x12\x10\n\x02pk\x18\x02\x20\x01(\x0cR\x02pkB\0\x12:\n\
    \x07failure\x18\x03\x20\x01(\x0e2\x1e.hbb.PunchHoleResponse.FailureR\x07\
    failureB\0\x12#\n\x0crelay_server\x18\x04\x20\x01(\tR\x0brelayServerB\0\
    \x12+\n\x08nat_type\x18\x05\x20\x01(\x0e2\x0c.hbb.NatTypeH\0R\x07natType\
    B\0\x12\x1d\n\x08is_local\x18\x06\x20\x01(\x08H\0R\x07isLocalB\0\x12%\n\
    \rother_failure\x18\x07\x20\x01(\tR\x0cotherFailureB\0\"]\n\x07Failure\
    \x12\x12\n\x0cID_NOT_EXIST\x10\x01\x1a\0\x12\r\n\x07OFFLINE\x10\x02\x1a\
    \0\x12\x16\n\x10LICENCE_MISMATCH\x10\x03\x1a\0\x12\x15\n\x0fLICENCE_OVER\
    USE\x10\x04\x1a\0\x1a\0B\t\n\x05union\x12\0:\0\"[\n\x0cConfigUpdate\x12\
    \x18\n\x06serial\x18\x01\x20\x01(\x05R\x06serialB\0\x12/\n\x12rendezvous\
    _servers\x18\x02\x20\x03(\tR\x11rendezvousServersB\0:\0\"\xc8\x01\n\x0cR\
    equestRelay\x12\x10\n\x02id\x18\x01\x20\x01(\tR\x02idB\0\x12\x14\n\x04uu\
    id\x18\x02\x20\x01(\tR\x04uuidB\0\x12!\n\x0bsocket_addr\x18\x03\x20\x01(\
    \x0cR\nsocketAddrB\0\x12#\n\x0crelay_server\x18\x04\x20\x01(\tR\x0brelay\
    ServerB\0\x12\x18\n\x06secure\x18\x05\x20\x01(\x08R\x06secureB\0\x12,\n\
    \tconn_type\x18\x07\x20\x01(\x0e2\r.hbb.ConnTypeR\x08connTypeB\0:\0\"\
    \xe5\x01\n\rRelayResponse\x12!\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\ns\
    ocketAddrB\0\x12\x14\n\x04uuid\x18\x02\x20\x01(\tR\x04uuidB\0\x12#\n\x0c\
    relay_server\x18\x03\x20\x01(\tR\x0brelayServerB\0\x12\x12\n\x02id\x18\
    \x04\x20\x01(\tH\0R\x02idB\0\x12\x12\n\x02pk\x18\x05\x20\x01(\x0cH\0R\
    \x02pkB\0\x12%\n\rrefuse_reason\x18\x06\x20\x01(\tR\x0crefuseReasonB\0\
    \x12\x1a\n\x07version\x18\x07\x20\x01(\tR\x07versionB\0B\t\n\x05union\
    \x12\0:\0\"&\n\x0eSoftwareUpdate\x12\x12\n\x03url\x18\x01\x20\x01(\tR\
    \x03urlB\0:\0\"Z\n\x0eFetchLocalAddr\x12!\n\x0bsocket_addr\x18\x01\x20\
    \x01(\x0cR\nsocketAddrB\0\x12#\n\x0crelay_server\x18\x02\x20\x01(\tR\x0b\
    relayServerB\0:\0\"\x88\x01\n\tLocalAddr\x12!\n\x0bsocket_addr\x18\x01\
    \x20\x01(\x0cR\nsocketAddrB\0\x12\x1f\n\nlocal_addr\x18\x02\x20\x01(\x0c\
    R\tlocalAddrB\0\x12#\n\x0crelay_server\x18\x03\x20\x01(\tR\x0brelayServe\
    rB\0\x12\x10\n\x02id\x18\x04\x20\x01(\tR\x02idB\0:\0\"\xbc\x08\n\x11Rend\
    ezvousMessage\x12:\n\rregister_peer\x18\x06\x20\x01(\x0b2\x11.hbb.Regist\
    erPeerH\0R\x0cregisterPeerB\0\x12S\n\x16register_peer_response\x18\x07\
    \x20\x01(\x0b2\x19.hbb.RegisterPeerResponseH\0R\x14registerPeerResponseB\
    \0\x12G\n\x12punch_hole_request\x18\x08\x20\x01(\x0b2\x15.hbb.PunchHoleR\
    equestH\0R\x10punchHoleRequestB\0\x121\n\npunch_hole\x18\t\x20\x01(\x0b2\
    \x0e.hbb.PunchHoleH\0R\tpunchHoleB\0\x12>\n\x0fpunch_hole_sent\x18\n\x20\
    \x01(\x0b2\x12.hbb.PunchHoleSentH\0R\rpunchHoleSentB\0\x12J\n\x13punch_h\
    ole_response\x18\x0b\x20\x01(\x0b2\x16.hbb.PunchHoleResponseH\0R\x11punc\
    hHoleResponseB\0\x12A\n\x10fetch_local_addr\x18\x0c\x20\x01(\x0b2\x13.hb\
    b.FetchLocalAddrH\0R\x0efetchLocalAddrB\0\x121\n\nlocal_addr\x18\r\x20\
    \x01(\x0b2\x0e.hbb.LocalAddrH\0R\tlocalAddrB\0\x12@\n\x10configure_updat\
    e\x18\x0e\x20\x01(\x0b2\x11.hbb.ConfigUpdateH\0R\x0fconfigureUpdateB\0\
    \x124\n\x0bregister_pk\x18\x0f\x20\x01(\x0b2\x0f.hbb.RegisterPkH\0R\nreg\
    isterPkB\0\x12M\n\x14register_pk_response\x18\x10\x20\x01(\x0b2\x17.hbb.\
    RegisterPkResponseH\0R\x12registerPkResponseB\0\x12@\n\x0fsoftware_updat\
    e\x18\x11\x20\x01(\x0b2\x13.hbb.SoftwareUpdateH\0R\x0esoftwareUpdateB\0\
    \x12:\n\rrequest_relay\x18\x12\x20\x01(\x0b2\x11.hbb.RequestRelayH\0R\
    \x0crequestRelayB\0\x12=\n\x0erelay_response\x18\x13\x20\x01(\x0b2\x12.h\
    bb.RelayResponseH\0R\rrelayResponseB\0\x12A\n\x10test_nat_request\x18\
    \x14\x20\x01(\x0b2\x13.hbb.TestNatRequestH\0R\x0etestNatRequestB\0\x12D\
    \n\x11test_nat_response\x18\x15\x20\x01(\x0b2\x14.hbb.TestNatResponseH\0\
    R\x0ftestNatResponseB\0B\t\n\x05union\x12\0:\0*T\n\x08ConnType\x12\x12\n\
    \x0cDEFAULT_CONN\x10\0\x1a\0\x12\x13\n\rFILE_TRANSFER\x10\x01\x1a\0\x12\
    \x12\n\x0cPORT_FORWARD\x10\x02\x1a\0\x12\t\n\x03RDP\x10\x03\x1a\0\x1a\0*\
    A\n\x07NatType\x12\x11\n\x0bUNKNOWN_NAT\x10\0\x1a\0\x12\x10\n\nASYMMETRI\
    C\x10\x01\x1a\0\x12\x0f\n\tSYMMETRIC\x10\x02\x1a\0\x1a\0B\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        let mut messages = ::std::vec::Vec::new();
        messages.push(RegisterPeer::generated_message_descriptor_data());
        messages.push(RegisterPeerResponse::generated_message_descriptor_data());
        messages.push(PunchHoleRequest::generated_message_descriptor_data());
        messages.push(PunchHole::generated_message_descriptor_data());
        messages.push(TestNatRequest::generated_message_descriptor_data());
        messages.push(TestNatResponse::generated_message_descriptor_data());
        messages.push(PunchHoleSent::generated_message_descriptor_data());
        messages.push(RegisterPk::generated_message_descriptor_data());
        messages.push(RegisterPkResponse::generated_message_descriptor_data());
        messages.push(PunchHoleResponse::generated_message_descriptor_data());
        messages.push(ConfigUpdate::generated_message_descriptor_data());
        messages.push(RequestRelay::generated_message_descriptor_data());
        messages.push(RelayResponse::generated_message_descriptor_data());
        messages.push(SoftwareUpdate::generated_message_descriptor_data());
        messages.push(FetchLocalAddr::generated_message_descriptor_data());
        messages.push(LocalAddr::generated_message_descriptor_data());
        messages.push(RendezvousMessage::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        enums.push(ConnType::generated_enum_descriptor_data());
        enums.push(NatType::generated_enum_descriptor_data());
        enums.push(register_pk_response::Result::generated_enum_descriptor_data());
        enums.push(punch_hole_response::Failure::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
